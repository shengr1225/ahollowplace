generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./.redwood/test.db"
}

model UserCredential {
  id         String  @id
  userId     Int
  publicKey  Bytes
  transports String?
  counter    BigInt
  user       User    @relation(fields: [userId], references: [id])
}

model User {
  id                  Int              @id @default(autoincrement())
  name                String?
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  jubenDriveId        Int?
  thumbnail           String?
  desc                String?
  label               String?
  ability             Int?             @default(10)
  tuili               Float?
  yanji               Float?
  xiezuo              Float?
  gaoxiao             Float?
  qinggan             Float?
  knot                String?
  roles               String           @default("player")
  currentExp          Int?             @default(0)
  MVPUntil            DateTime?
  isMVP               Boolean?         @default(false)
  webAuthnChallenge   String?          @unique
  reviews             Review[]
  JubenDrive          JubenDrive?      @relation(fields: [jubenDriveId], references: [id])
  UserCredential      UserCredential[]
  bookings            Booking[]        @relation("BookingToUser")
  mvpJubens           Juben[]          @relation("JubenToUser")
}

model Juben {
  id             Int          @id @default(autoincrement())
  name           String
  score          Float?
  image          String
  desc           String
  section        String
  sections       String
  players        String
  canSwitchSex   Boolean      @default(false)
  duration       Int          @default(6)
  price          Int          @default(49)
  photos         String?
  available      Boolean      @default(true)
  bookingRecords Booking[]
  drives         JubenDrive[]
  reviews        Review[]
  timeSlots      TimeSlot[]   @relation("JubenToTimeSlot")
  mvps           User[]       @relation("JubenToUser")
}

model Booking {
  id           Int         @id @default(autoincrement())
  date         DateTime
  total        Int?
  male         Int?
  female       Int?
  note         String?
  status       String      @default("Carpooling")
  jubenId      Int
  timeSlotId   Int
  jubenDriveId Int?
  JubenDrive   JubenDrive? @relation(fields: [jubenDriveId], references: [id])
  juben        Juben       @relation(fields: [jubenId], references: [id])
  timeSlot     TimeSlot    @relation(fields: [timeSlotId], references: [id])
  users        User[]      @relation("BookingToUser")
}

model TimeSlot {
  id            Int          @id @default(autoincrement())
  start         String
  end           String
  last          Int
  onlyInWeekend Boolean      @default(false)
  bookings      Booking[]
  jubenDrives   JubenDrive[]
  jubens        Juben[]      @relation("JubenToTimeSlot")
}

model JubenDrive {
  id         Int       @id @default(autoincrement())
  date       DateTime
  male       Int
  female     Int
  total      Int
  status     String    @default("Carpooling")
  jubenId    Int
  timeSlotId Int
  bookings   Booking[]
  juben      Juben     @relation(fields: [jubenId], references: [id])
  timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id])
  users      User[]
}

model Review {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime
  jubenId       Int
  rateOfJuben   Int
  reviewOfJuben String?
  rateOfDM      Int
  reviewOfDM    String?
  rateOfFood    Int?
  reviewOfFood  String?
  userId        Int?
  dm            String   @default("小满")
  juben         Juben    @relation(fields: [jubenId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])
}
